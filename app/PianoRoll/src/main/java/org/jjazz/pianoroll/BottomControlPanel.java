/*
 * 
 *   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *  
 *   Copyright @2019 Jerome Lelasseux. All rights reserved.
 * 
 *   This file is part of the JJazzLab software.
 *    
 *   JJazzLab is free software: you can redistribute it and/or modify
 *   it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *   as published by the Free Software Foundation, either version 3 of the License, 
 *   or (at your option) any later version.
 * 
 *   JJazzLab is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *  
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with JJazzLab.  If not, see <https://www.gnu.org/licenses/>
 *  
 *   Contributor(s): 
 * 
 */
package org.jjazz.pianoroll;

import javax.swing.JToggleButton;

/**
 * The control panel to select which EditorPanel is shown in the bottom part of the editor.
 */
public class BottomControlPanel extends javax.swing.JPanel
{

    public static final String VELOCITY_EDITOR_PANEL_STRING = "Velocity";
    public static final String SCORE_EDITOR_PANEL_STRING = "Score";
    /**
     * Fired when user changed the selected editor panel.
     * <p>
     * oldValue=null, newValue=e.g. VELOCITY_EDITOR_PANEL_STRING
     */
    public static final String PROP_EDITOR_PANEL_STRING = "PropEditorPanelString";
    private static String lastEditorPanelShown = VELOCITY_EDITOR_PANEL_STRING;
    private final VelocityPanel velocityPanel;
    private final ScorePanel scorePanel;

    /**
     * Creates new form BottomControlPanel
     *
     * @param vPanel
     * @param sPanel
     */
    public BottomControlPanel(VelocityPanel vPanel, ScorePanel sPanel)
    {
        this.velocityPanel = vPanel;
        this.scorePanel = sPanel;
        initComponents();

        // Keep spinner updated
        this.sp_displayTransposition.setValue(scorePanel.getOctaveTransposition());
        this.scorePanel.addPropertyChangeListener(ScorePanel.PROP_OCTAVE_TRANSPOSITION,
                e -> sp_displayTransposition.setValue(scorePanel.getOctaveTransposition()));

        setSelectedPanel(lastEditorPanelShown);
    }

    /**
     * Select an editor panel.
     * <p>
     * Might fire a PROP_EDITOR_PANEL_STRING change event.
     *
     * @param s SCORE_EDITOR_PANEL_STRING or VELOCITY_EDITOR_PANEL_STRING
     */
    public void setSelectedPanel(String s)
    {
        JToggleButton btn = switch (s)
        {
            case VELOCITY_EDITOR_PANEL_STRING ->
                rb_velocity;
            case SCORE_EDITOR_PANEL_STRING ->
                rb_score;
            default -> throw new IllegalArgumentException("s=" + s);
        };
        if (btn.isSelected() == false)
        {
            btn.setSelected(true);
            selectionChanged();
        }
    }

    public String getSelectedPanelString()
    {
        return rb_velocity.isSelected() ? VELOCITY_EDITOR_PANEL_STRING : SCORE_EDITOR_PANEL_STRING;
    }

    private void selectionChanged()
    {
        lastEditorPanelShown = getSelectedPanelString();
        firePropertyChange(PROP_EDITOR_PANEL_STRING, null, lastEditorPanelShown);
        boolean b = rb_score.isSelected();
        lbl_displayTransposition.setEnabled(b);
        sp_displayTransposition.setEnabled(b);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rb_velocity = new javax.swing.JRadioButton();
        rb_score = new javax.swing.JRadioButton();
        sp_displayTransposition = new org.jjazz.flatcomponents.api.WheelSpinner();
        lbl_displayTransposition = new javax.swing.JLabel();

        buttonGroup1.add(rb_velocity);
        rb_velocity.setFont(rb_velocity.getFont().deriveFont(rb_velocity.getFont().getSize()-1f));
        rb_velocity.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(rb_velocity, org.openide.util.NbBundle.getMessage(BottomControlPanel.class, "BottomControlPanel.rb_velocity.text")); // NOI18N
        rb_velocity.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rb_velocityActionPerformed(evt);
            }
        });

        buttonGroup1.add(rb_score);
        rb_score.setFont(rb_score.getFont().deriveFont(rb_score.getFont().getSize()-1f));
        org.openide.awt.Mnemonics.setLocalizedText(rb_score, org.openide.util.NbBundle.getMessage(BottomControlPanel.class, "BottomControlPanel.rb_score.text")); // NOI18N
        rb_score.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rb_scoreActionPerformed(evt);
            }
        });

        sp_displayTransposition.setModel(new javax.swing.SpinnerNumberModel(0, -3, 3, 1));
        sp_displayTransposition.setToolTipText(org.openide.util.NbBundle.getMessage(BottomControlPanel.class, "BottomControlPanel.sp_displayTransposition.toolTipText")); // NOI18N
        sp_displayTransposition.setColumns(2);
        sp_displayTransposition.setFont(sp_displayTransposition.getFont().deriveFont(sp_displayTransposition.getFont().getSize()-2f));
        sp_displayTransposition.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                sp_displayTranspositionStateChanged(evt);
            }
        });

        lbl_displayTransposition.setFont(lbl_displayTransposition.getFont().deriveFont(lbl_displayTransposition.getFont().getSize()-2f));
        lbl_displayTransposition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(lbl_displayTransposition, org.openide.util.NbBundle.getMessage(BottomControlPanel.class, "BottomControlPanel.lbl_displayTransposition.text")); // NOI18N
        lbl_displayTransposition.setToolTipText(sp_displayTransposition.getToolTipText());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rb_velocity)
                    .addComponent(rb_score, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_displayTransposition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sp_displayTransposition, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rb_velocity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rb_score)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_displayTransposition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp_displayTransposition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rb_velocityActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rb_velocityActionPerformed
    {//GEN-HEADEREND:event_rb_velocityActionPerformed
        selectionChanged();
    }//GEN-LAST:event_rb_velocityActionPerformed

    private void rb_scoreActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rb_scoreActionPerformed
    {//GEN-HEADEREND:event_rb_scoreActionPerformed
        selectionChanged();
    }//GEN-LAST:event_rb_scoreActionPerformed

    private void sp_displayTranspositionStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sp_displayTranspositionStateChanged
    {//GEN-HEADEREND:event_sp_displayTranspositionStateChanged
        scorePanel.setOctaveTransposition((Integer) sp_displayTransposition.getValue());
    }//GEN-LAST:event_sp_displayTranspositionStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel lbl_displayTransposition;
    private javax.swing.JRadioButton rb_score;
    private javax.swing.JRadioButton rb_velocity;
    private org.jjazz.flatcomponents.api.WheelSpinner sp_displayTransposition;
    // End of variables declaration//GEN-END:variables
}
