/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.options;

import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import org.jjazz.harmony.ChordType;
import org.jjazz.harmony.ChordTypeDatabase;
import org.jjazz.harmony.Note;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

final class ChordSymbolsPanel extends javax.swing.JPanel implements ListSelectionListener
{

    boolean firstShow = true;
    private final ChordSymbolsOptionsPanelController controller;
    private ChordSymbolTableModel tableModel = new ChordSymbolTableModel();
    private static final Logger LOGGER = Logger.getLogger(ChordSymbolsPanel.class.getSimpleName());

    ChordSymbolsPanel(ChordSymbolsOptionsPanelController controller)
    {
        this.controller = controller;
        initComponents();
        tbl_chordSymbols.getSelectionModel().addListSelectionListener(this);
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_chordSymbols = new javax.swing.JTable();
        btn_add = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        btn_resetAll = new javax.swing.JButton();

        tbl_chordSymbols.setModel(tableModel);
        tbl_chordSymbols.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl_chordSymbols.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbl_chordSymbols);

        org.openide.awt.Mnemonics.setLocalizedText(btn_add, org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_add.text")); // NOI18N
        btn_add.setToolTipText(org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_add.toolTipText")); // NOI18N
        btn_add.setEnabled(false);
        btn_add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_addActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btn_reset, org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_reset.text")); // NOI18N
        btn_reset.setToolTipText(org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_reset.toolTipText")); // NOI18N
        btn_reset.setEnabled(false);
        btn_reset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_resetActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btn_resetAll, org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_resetAll.text")); // NOI18N
        btn_resetAll.setToolTipText(org.openide.util.NbBundle.getMessage(ChordSymbolsPanel.class, "ChordSymbolsPanel.btn_resetAll.toolTipText")); // NOI18N
        btn_resetAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_resetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_reset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(btn_resetAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_add, btn_reset, btn_resetAll});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_reset)
                        .addGap(69, 69, 69)
                        .addComponent(btn_resetAll)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        ChordTypeDatabase ctdb = ChordTypeDatabase.getInstance();
        int row = tbl_chordSymbols.getSelectedRow();
        if (row == -1)
        {
            return;
        }
        ChordType ct = ctdb.getChordType(row);
        NotifyDescriptor.InputLine input = new NotifyDescriptor.InputLine("Alias", "Add alias for C" + ct.getName());
        input.setInputText("C" + ct.getName()); // specify a default name
        Object result = DialogDisplayer.getDefault().notify(input);
        if (result != NotifyDescriptor.OK_OPTION)
        {
            return;
        }
        String s = input.getInputText().trim();
        if (!s.isEmpty())
        {
            if (s.charAt(0) != 'C' && s.charAt(0) != 'c')
            {
                NotifyDescriptor d = new NotifyDescriptor.Message("Alias must start with 'C'", NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(d);
                return;
            }
            s = s.substring(1);
            try
            {
                ctdb.addAlias(ct, s);
            } catch (ChordTypeDatabase.InvalidAliasException ex)
            {
                NotifyDescriptor d = new NotifyDescriptor.Message(ex.getLocalizedMessage(), NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(d);
                return;
            }
            // Refresh the table
            tableModel.fireTableRowsUpdated(row, row);
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_resetActionPerformed
    {//GEN-HEADEREND:event_btn_resetActionPerformed
        ChordTypeDatabase ctdb = ChordTypeDatabase.getInstance();
        int row = tbl_chordSymbols.getSelectedRow();
        if (row == -1)
        {
            return;
        }
        ChordType ct = ctdb.getChordType(row);
        ctdb.resetAliases(ct);
        tableModel.fireTableRowsUpdated(row, row);
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_resetAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_resetAllActionPerformed
    {//GEN-HEADEREND:event_btn_resetAllActionPerformed
        ChordTypeDatabase ctdb = ChordTypeDatabase.getInstance();
        String msg = "This will reset aliases for all chord symbols. Are you sure ?";
        NotifyDescriptor nd = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.OK_CANCEL_OPTION);
        Object result = DialogDisplayer.getDefault().notify(nd);
        if (result == NotifyDescriptor.OK_OPTION)
        {
            ctdb.resetAliasesToDefault();
            tableModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_btn_resetAllActionPerformed

    void load()
    {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(chordsymbolsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(chordsymbolsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        if (firstShow)
        {
            int w = tbl_chordSymbols.getPreferredSize().width;
            if (w == 0)
            {
                w = 200;    // Just in case
            }
            TableColumnModel tcm = this.tbl_chordSymbols.getColumnModel();
            tcm.getColumn(0).setPreferredWidth((int) (w * 0.15f)); // Chord Symbol
            tcm.getColumn(1).setPreferredWidth((int) (w * 0.15f)); // Notes
            tcm.getColumn(2).setPreferredWidth((int) (w * 0.7f)); // Aliases
            firstShow = false;
        }
    }

    void store()
    {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(chordsymbolsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(chordsymbolsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid()
    {
        // TODO check whether form is consistent and complete
        return true;
    }

    // ===============================================================================
    // ListSelectionListener implementation
    // ===============================================================================
    @Override
    public void valueChanged(ListSelectionEvent e)
    {
        if (e.getValueIsAdjusting())
        {
            return;
        }
        if (e.getSource() == tbl_chordSymbols.getSelectionModel())
        {
            int row = tbl_chordSymbols.getSelectedRow();
            btn_add.setEnabled(row != -1);
            btn_reset.setEnabled(row != -1);
        }
    }

    private class ChordSymbolTableModel extends AbstractTableModel
    {

        @Override
        public Class<?> getColumnClass(int columnIndex)
        {
            return String.class;
        }

        @Override
        public String getColumnName(int columnIndex)
        {
            String s;
            switch (columnIndex)
            {
                case 0:
                    s = "Chord Symbol";
                    break;
                case 1:
                    s = "Notes";
                    break;
                case 2:
                    s = "Aliases";
                    break;
                default:
                    throw new IllegalStateException("columnIndex=" + columnIndex);
            }
            return s;
        }

        @Override
        public int getRowCount()
        {
            return ChordTypeDatabase.getInstance().getSize();
        }

        @Override
        public int getColumnCount()
        {
            return 3;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex)
        {
            ChordTypeDatabase ctdb = ChordTypeDatabase.getInstance();
            ChordType ct = ctdb.getChordType(rowIndex);
            switch (columnIndex)
            {
                case 0:
                    return "C" + ct.getName();
                case 1:
                    return ct.getChord().toRelativeNoteString(Note.Alteration.FLAT);
                case 2:
                    StringBuilder sb = new StringBuilder();
                    for (String alias : ctdb.getAliases(ct))
                    {
                        if (sb.length() > 0)
                        {
                            sb.append(", ");
                        }
                        sb.append("C").append(alias);
                    }
                    return sb.toString();
                default:
                    throw new IllegalStateException("columnIndex=" + columnIndex);
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_resetAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_chordSymbols;
    // End of variables declaration//GEN-END:variables
}
